// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.4.0.0
//      SpecFlow Generator Version:3.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ToyRobot.Test.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class NavigationFeature : object, Xunit.IClassFixture<NavigationFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Navigation.feature"
#line hidden
        
        public NavigationFeature(NavigationFeature.FixtureData fixtureData, ToyRobot_Test_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Navigation", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Add Robot to Table")]
        [Xunit.TraitAttribute("FeatureTitle", "Navigation")]
        [Xunit.TraitAttribute("Description", "Add Robot to Table")]
        [Xunit.TraitAttribute("Category", "integration")]
        [Xunit.InlineDataAttribute("1", "0", "0", "\"North\"", "\"Ok\"", "\"Ok\"", "\"true\"", new string[0])]
        [Xunit.InlineDataAttribute("2", "0", "4", "\"North\"", "\"Ok\"", "\"Ok\"", "\"true\"", new string[0])]
        [Xunit.InlineDataAttribute("3", "4", "0", "\"North\"", "\"Ok\"", "\"Ok\"", "\"true\"", new string[0])]
        [Xunit.InlineDataAttribute("4", "2", "2", "\"North\"", "\"Ok\"", "\"Ok\"", "\"true\"", new string[0])]
        [Xunit.InlineDataAttribute("5", "4", "4", "\"North\"", "\"Ok\"", "\"Ok\"", "\"true\"", new string[0])]
        [Xunit.InlineDataAttribute("6", "0", "5", "\"North\"", "\"Ok\"", "\"Ok\"", "\"false\"", new string[0])]
        [Xunit.InlineDataAttribute("7", "5", "0", "\"North\"", "\"Ok\"", "\"Ok\"", "\"false\"", new string[0])]
        [Xunit.InlineDataAttribute("8", "-1", "2", "\"North\"", "\"Ok\"", "\"Ok\"", "\"false\"", new string[0])]
        [Xunit.InlineDataAttribute("9", "2", "-1", "\"North\"", "\"Ok\"", "\"Ok\"", "\"false\"", new string[0])]
        [Xunit.InlineDataAttribute("10", "-10", "-10", "\"North\"", "\"Ok\"", "\"Ok\"", "\"false\"", new string[0])]
        public virtual void AddRobotToTable(string id, string x, string y, string orientation, string status, string message, string is_Added, string[] exampleTags)
        {
            string[] @__tags = new string[] {
                    "integration"};
            if ((exampleTags != null))
            {
                @__tags = System.Linq.Enumerable.ToArray(System.Linq.Enumerable.Concat(@__tags, exampleTags));
            }
            string[] tagsOfScenario = @__tags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("id", id);
            argumentsOfScenario.Add("x", x);
            argumentsOfScenario.Add("y", y);
            argumentsOfScenario.Add("orientation", orientation);
            argumentsOfScenario.Add("status", status);
            argumentsOfScenario.Add("message", message);
            argumentsOfScenario.Add("is_added", is_Added);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add Robot to Table", null, tagsOfScenario, argumentsOfScenario);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 testRunner.Given("the robot exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
 testRunner.And("I have a table of height 5 and width 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 7
 testRunner.When(string.Format("I place the robot at {0} and {1} facing {2}", x, y, orientation), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 8
 testRunner.Then(string.Format("the value of the status will be {0}", status), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 9
 testRunner.And(string.Format("the status will contain the message {0}", message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 10
 testRunner.And(string.Format("the robot {0} to the table at {1} and {2}", is_Added, x, y), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Report Robot Position")]
        [Xunit.TraitAttribute("FeatureTitle", "Navigation")]
        [Xunit.TraitAttribute("Description", "Report Robot Position")]
        [Xunit.InlineDataAttribute("1", "0", "0", "\"North\"", "\"Ok\"", "\"Ok\"", "\"0,0,North\"", new string[0])]
        [Xunit.InlineDataAttribute("2", "0", "4", "\"North\"", "\"Ok\"", "\"Ok\"", "\"0,4,North\"", new string[0])]
        [Xunit.InlineDataAttribute("3", "4", "0", "\"North\"", "\"Ok\"", "\"Ok\"", "\"4,0,North\"", new string[0])]
        [Xunit.InlineDataAttribute("4", "2", "2", "\"North\"", "\"Ok\"", "\"Ok\"", "\"2,2,North\"", new string[0])]
        [Xunit.InlineDataAttribute("5", "4", "4", "\"North\"", "\"Ok\"", "\"Ok\"", "\"4,4,North\"", new string[0])]
        [Xunit.InlineDataAttribute("6", "2", "2", "\"South\"", "\"Ok\"", "\"Ok\"", "\"2,2,South\"", new string[0])]
        [Xunit.InlineDataAttribute("7", "2", "2", "\"East\"", "\"Ok\"", "\"Ok\"", "\"2,2,East\"", new string[0])]
        [Xunit.InlineDataAttribute("8", "2", "2", "\"West\"", "\"Ok\"", "\"Ok\"", "\"2,2,West\"", new string[0])]
        [Xunit.InlineDataAttribute("9", "0", "5", "\"North\"", "\"Ok\"", "\"Ok\"", "\"\"", new string[0])]
        [Xunit.InlineDataAttribute("10", "5", "0", "\"North\"", "\"Ok\"", "\"Ok\"", "\"\"", new string[0])]
        [Xunit.InlineDataAttribute("11", "-1", "2", "\"North\"", "\"Ok\"", "\"Ok\"", "\"\"", new string[0])]
        [Xunit.InlineDataAttribute("12", "2", "-1", "\"North\"", "\"Ok\"", "\"Ok\"", "\"\"", new string[0])]
        [Xunit.InlineDataAttribute("13", "-10", "-10", "\"North\"", "\"Ok\"", "\"Ok\"", "\"\"", new string[0])]
        public virtual void ReportRobotPosition(string id, string x, string y, string orientation, string status, string message, string report, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("id", id);
            argumentsOfScenario.Add("x", x);
            argumentsOfScenario.Add("y", y);
            argumentsOfScenario.Add("orientation", orientation);
            argumentsOfScenario.Add("status", status);
            argumentsOfScenario.Add("message", message);
            argumentsOfScenario.Add("report", report);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Report Robot Position", null, tagsOfScenario, argumentsOfScenario);
#line 25
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 26
 testRunner.Given("the robot exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 27
 testRunner.And("I have a table of height 5 and width 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 28
 testRunner.When(string.Format("I place the robot at {0} and {1} facing {2}", x, y, orientation), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 29
 testRunner.And("I Report the Robot Position", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 30
 testRunner.Then(string.Format("the report returns {0}", report), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Move Robot around Table")]
        [Xunit.TraitAttribute("FeatureTitle", "Navigation")]
        [Xunit.TraitAttribute("Description", "Move Robot around Table")]
        [Xunit.InlineDataAttribute("1.1", "2", "0", "\"North\"", "\"Ok\"", "\"Ok\"", "\"true\"", "2", "1", new string[0])]
        [Xunit.InlineDataAttribute("1.2", "2", "4", "\"North\"", "\"Ok\"", "\"Ok\"", "\"false\"", "2", "4", new string[0])]
        [Xunit.InlineDataAttribute("1.3", "4", "2", "\"North\"", "\"Ok\"", "\"Ok\"", "\"true\"", "4", "3", new string[0])]
        [Xunit.InlineDataAttribute("1.4", "0", "2", "\"North\"", "\"Ok\"", "\"Ok\"", "\"true\"", "0", "3", new string[0])]
        [Xunit.InlineDataAttribute("1.5", "2", "2", "\"North\"", "\"Ok\"", "\"Ok\"", "\"true\"", "2", "3", new string[0])]
        [Xunit.InlineDataAttribute("2.1", "2", "0", "\"South\"", "\"Ok\"", "\"Ok\"", "\"false\"", "2", "0", new string[0])]
        [Xunit.InlineDataAttribute("2.2", "2", "4", "\"South\"", "\"Ok\"", "\"Ok\"", "\"true\"", "2", "3", new string[0])]
        [Xunit.InlineDataAttribute("2.3", "4", "2", "\"South\"", "\"Ok\"", "\"Ok\"", "\"true\"", "4", "1", new string[0])]
        [Xunit.InlineDataAttribute("2.4", "0", "2", "\"South\"", "\"Ok\"", "\"Ok\"", "\"true\"", "0", "1", new string[0])]
        [Xunit.InlineDataAttribute("2.5", "2", "2", "\"South\"", "\"Ok\"", "\"Ok\"", "\"true\"", "2", "1", new string[0])]
        [Xunit.InlineDataAttribute("3.1", "2", "0", "\"East\"", "\"Ok\"", "\"Ok\"", "\"true\"", "3", "0", new string[0])]
        [Xunit.InlineDataAttribute("3.2", "2", "4", "\"East\"", "\"Ok\"", "\"Ok\"", "\"true\"", "3", "4", new string[0])]
        [Xunit.InlineDataAttribute("3.3", "4", "2", "\"East\"", "\"Ok\"", "\"Ok\"", "\"false\"", "4", "2", new string[0])]
        [Xunit.InlineDataAttribute("3.4", "0", "2", "\"East\"", "\"Ok\"", "\"Ok\"", "\"true\"", "1", "2", new string[0])]
        [Xunit.InlineDataAttribute("3.5", "2", "2", "\"East\"", "\"Ok\"", "\"Ok\"", "\"true\"", "3", "2", new string[0])]
        [Xunit.InlineDataAttribute("4.1", "2", "0", "\"West\"", "\"Ok\"", "\"Ok\"", "\"true\"", "1", "0", new string[0])]
        [Xunit.InlineDataAttribute("4.2", "2", "4", "\"West\"", "\"Ok\"", "\"Ok\"", "\"true\"", "1", "4", new string[0])]
        [Xunit.InlineDataAttribute("4.3", "4", "2", "\"West\"", "\"Ok\"", "\"Ok\"", "\"true\"", "3", "2", new string[0])]
        [Xunit.InlineDataAttribute("4.4", "0", "2", "\"West\"", "\"Ok\"", "\"Ok\"", "\"false\"", "0", "2", new string[0])]
        [Xunit.InlineDataAttribute("4.5", "2", "2", "\"West\"", "\"Ok\"", "\"Ok\"", "\"true\"", "1", "2", new string[0])]
        public virtual void MoveRobotAroundTable(string id, string x, string y, string orientation, string status, string message, string has_Moved, string result_X, string result_Y, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("id", id);
            argumentsOfScenario.Add("x", x);
            argumentsOfScenario.Add("y", y);
            argumentsOfScenario.Add("orientation", orientation);
            argumentsOfScenario.Add("status", status);
            argumentsOfScenario.Add("message", message);
            argumentsOfScenario.Add("has_moved", has_Moved);
            argumentsOfScenario.Add("result_x", result_X);
            argumentsOfScenario.Add("result_y", result_Y);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Move Robot around Table", null, tagsOfScenario, argumentsOfScenario);
#line 48
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 49
 testRunner.Given("the robot exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 50
 testRunner.And("I have a table of height 5 and width 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 51
 testRunner.When(string.Format("I place the robot at {0} and {1} facing {2}", x, y, orientation), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 52
 testRunner.And("I move the robot forward", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 53
 testRunner.Then(string.Format("the value of the status will be {0}", status), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 54
 testRunner.And(string.Format("the status will contain the message {0}", message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 55
 testRunner.And(string.Format("the robot {0} on the table to {1} and {2}", has_Moved, result_X, result_Y), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Turn Robot around Table")]
        [Xunit.TraitAttribute("FeatureTitle", "Navigation")]
        [Xunit.TraitAttribute("Description", "Turn Robot around Table")]
        [Xunit.InlineDataAttribute("1", "3", "3", "\"North\"", "\"Left\"", "\"Ok\"", "\"Ok\"", "3", "3", "\"West\"", new string[0])]
        [Xunit.InlineDataAttribute("2", "3", "3", "\"North\"", "\"Right\"", "\"Ok\"", "\"Ok\"", "3", "3", "\"East\"", new string[0])]
        [Xunit.InlineDataAttribute("3", "3", "3", "\"South\"", "\"Left\"", "\"Ok\"", "\"Ok\"", "3", "3", "\"East\"", new string[0])]
        [Xunit.InlineDataAttribute("4", "3", "3", "\"South\"", "\"Right\"", "\"Ok\"", "\"Ok\"", "3", "3", "\"West\"", new string[0])]
        [Xunit.InlineDataAttribute("5", "3", "3", "\"East\"", "\"Left\"", "\"Ok\"", "\"Ok\"", "3", "3", "\"North\"", new string[0])]
        [Xunit.InlineDataAttribute("6", "3", "3", "\"East\"", "\"Right\"", "\"Ok\"", "\"Ok\"", "3", "3", "\"South\"", new string[0])]
        [Xunit.InlineDataAttribute("7", "3", "3", "\"West\"", "\"Left\"", "\"Ok\"", "\"Ok\"", "3", "3", "\"South\"", new string[0])]
        [Xunit.InlineDataAttribute("8", "3", "3", "\"West\"", "\"Right\"", "\"Ok\"", "\"Ok\"", "3", "3", "\"North\"", new string[0])]
        public virtual void TurnRobotAroundTable(string id, string x, string y, string orientation, string direction, string status, string message, string result_X, string result_Y, string result_Orientation, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("id", id);
            argumentsOfScenario.Add("x", x);
            argumentsOfScenario.Add("y", y);
            argumentsOfScenario.Add("orientation", orientation);
            argumentsOfScenario.Add("direction", direction);
            argumentsOfScenario.Add("status", status);
            argumentsOfScenario.Add("message", message);
            argumentsOfScenario.Add("result_x", result_X);
            argumentsOfScenario.Add("result_y", result_Y);
            argumentsOfScenario.Add("result_orientation", result_Orientation);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Turn Robot around Table", null, tagsOfScenario, argumentsOfScenario);
#line 80
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 81
 testRunner.Given("the robot exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 82
 testRunner.And("I have a table of height 5 and width 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 83
 testRunner.When(string.Format("I place the robot at {0} and {1} facing {2}", x, y, orientation), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 84
 testRunner.And(string.Format("I turn the robot {0}", direction), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 85
 testRunner.Then(string.Format("the value of the status will be {0}", status), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
#line 86
 testRunner.And(string.Format("the status will contain the message {0}", message), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 87
 testRunner.And(string.Format("the robot is on the table at {0} and {1} facing {2}", result_X, result_Y, result_Orientation), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableTheoryAttribute(DisplayName="Robot Attempts to move onto blocked square")]
        [Xunit.TraitAttribute("FeatureTitle", "Navigation")]
        [Xunit.TraitAttribute("Description", "Robot Attempts to move onto blocked square")]
        [Xunit.InlineDataAttribute("1", "3", "3", "\"North\"", "3", "4", "\"Ok\"", "\"Ok\"", "3", "3", "\"North\"", new string[0])]
        [Xunit.InlineDataAttribute("2", "3", "3", "\"North\"", "3", "2", "\"Ok\"", "\"Ok\"", "3", "4", "\"North\"", new string[0])]
        public virtual void RobotAttemptsToMoveOntoBlockedSquare(string id, string x, string y, string orientation, string blocked_X, string blocked_Y, string status, string message, string result_X, string result_Y, string result_Orientation, string[] exampleTags)
        {
            string[] tagsOfScenario = exampleTags;
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            argumentsOfScenario.Add("id", id);
            argumentsOfScenario.Add("x", x);
            argumentsOfScenario.Add("y", y);
            argumentsOfScenario.Add("orientation", orientation);
            argumentsOfScenario.Add("blocked_x", blocked_X);
            argumentsOfScenario.Add("blocked_y", blocked_Y);
            argumentsOfScenario.Add("status", status);
            argumentsOfScenario.Add("message", message);
            argumentsOfScenario.Add("result_x", result_X);
            argumentsOfScenario.Add("result_y", result_Y);
            argumentsOfScenario.Add("result_orientation", result_Orientation);
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Robot Attempts to move onto blocked square", null, tagsOfScenario, argumentsOfScenario);
#line 100
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 101
 testRunner.Given("the robot exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 102
 testRunner.And("I have a table of height 5 and width 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 103
 testRunner.When(string.Format("I block the position {0} and {1}", blocked_X, blocked_Y), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
#line 104
 testRunner.And(string.Format("I place the robot at {0} and {1} facing {2}", x, y, orientation), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 105
 testRunner.And("I move the robot forward", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
#line 106
 testRunner.Then(string.Format("the robot is on the table at {0} and {1} facing {2}", result_X, result_Y, result_Orientation), ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.4.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                NavigationFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                NavigationFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
