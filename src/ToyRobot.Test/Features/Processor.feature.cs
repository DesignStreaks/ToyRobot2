// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.4.0.0
//      SpecFlow Generator Version:3.4.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace ToyRobot.Test.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.4.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class ProcessorFeature : object, Xunit.IClassFixture<ProcessorFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "Processor.feature"
#line hidden
        
        public ProcessorFeature(ProcessorFeature.FixtureData fixtureData, ToyRobot_Test_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "Processor", null, ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Add two numbers")]
        [Xunit.TraitAttribute("FeatureTitle", "Processor")]
        [Xunit.TraitAttribute("Description", "Add two numbers")]
        [Xunit.TraitAttribute("Category", "integration")]
        public virtual void AddTwoNumbers()
        {
            string[] tagsOfScenario = new string[] {
                    "integration"};
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Add two numbers", null, tagsOfScenario, argumentsOfScenario);
#line 4
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 5
 testRunner.Given("the robot exists", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
#line 6
 testRunner.And("I have a table of height 5 and width 5", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "And ");
#line hidden
                TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                            "id",
                            "command_type",
                            "x",
                            "y",
                            "orientation"});
                table1.AddRow(new string[] {
                            "1.1",
                            "Place",
                            "2",
                            "2",
                            "North"});
                table1.AddRow(new string[] {
                            "1.2",
                            "Move",
                            "",
                            "",
                            ""});
                table1.AddRow(new string[] {
                            "1.3",
                            "Move",
                            "",
                            "",
                            ""});
                table1.AddRow(new string[] {
                            "1.4",
                            "Left",
                            "",
                            "",
                            ""});
                table1.AddRow(new string[] {
                            "1.5",
                            "Report",
                            "",
                            "",
                            ""});
                table1.AddRow(new string[] {
                            "2.1",
                            "Move",
                            "",
                            "",
                            ""});
                table1.AddRow(new string[] {
                            "2.2",
                            "Report",
                            "",
                            "",
                            ""});
                table1.AddRow(new string[] {
                            "3.1",
                            "Move",
                            "",
                            "",
                            ""});
                table1.AddRow(new string[] {
                            "3.2",
                            "Report",
                            "",
                            "",
                            ""});
                table1.AddRow(new string[] {
                            "4.1",
                            "Move",
                            "",
                            "",
                            ""});
                table1.AddRow(new string[] {
                            "4.2",
                            "Report",
                            "",
                            "",
                            ""});
                table1.AddRow(new string[] {
                            "5.1",
                            "Left",
                            "",
                            "",
                            ""});
                table1.AddRow(new string[] {
                            "5.2",
                            "Report",
                            "",
                            "",
                            ""});
                table1.AddRow(new string[] {
                            "6.1",
                            "Right",
                            "",
                            "",
                            ""});
                table1.AddRow(new string[] {
                            "6.2",
                            "Right",
                            "",
                            "",
                            ""});
                table1.AddRow(new string[] {
                            "6.3",
                            "Move",
                            "",
                            "",
                            ""});
                table1.AddRow(new string[] {
                            "6.4",
                            "Report",
                            "",
                            "",
                            ""});
#line 7
 testRunner.And("the following commands are executed", ((string)(null)), table1, "And ");
#line hidden
#line 26
 testRunner.When("all commands are processed", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "id",
                            "report"});
                table2.AddRow(new string[] {
                            "1",
                            "2,4,West"});
                table2.AddRow(new string[] {
                            "2",
                            "1,4,West"});
                table2.AddRow(new string[] {
                            "3",
                            "0,4,West"});
                table2.AddRow(new string[] {
                            "4",
                            "0,4,West"});
                table2.AddRow(new string[] {
                            "5",
                            "0,4,South"});
                table2.AddRow(new string[] {
                            "6",
                            "0,5,North"});
#line 27
 testRunner.Then("the output contains <report>", ((string)(null)), table2, "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.4.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                ProcessorFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                ProcessorFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
